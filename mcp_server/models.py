# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:04:38+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class CatalogPvtSkusellersSkuIdGetResponseItem(BaseModel):
    Id: Optional[int] = Field(None, description='SKU Binding ID.')
    IsActive: Optional[bool] = Field(
        None, description='Defines if the SKU binding is active.'
    )
    LastUpdateDate: Optional[str] = Field(
        None,
        description='Date when the SKU binding was updated for the last time, in UTC format.',
    )
    SalesPolicy: Optional[int] = Field(None, description='Sales policy ID.')
    SellerId: Optional[str] = Field(
        None,
        description='ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
    )
    SellerSkuId: Optional[str] = Field(None, description='SKU seller ID.')
    StockKeepingUnitId: Optional[int] = Field(
        None, description='SKU ID in the VTEX marketplace.'
    )


class CatalogPvtSkusellersSkuIdGetResponse(
    RootModel[List[CatalogPvtSkusellersSkuIdGetResponseItem]]
):
    root: List[CatalogPvtSkusellersSkuIdGetResponseItem] = Field(
        ...,
        description='Array containing objects with information about each SKU Binding.',
    )


class SkuBindingPvtSkusellerAdminGetResponse(BaseModel):
    IsActive: Optional[bool] = Field(
        None, description='Defines if the SKU binding is active.'
    )
    IsPersisted: Optional[bool] = Field(
        None, description='Defines if the seller is persisted.'
    )
    IsRemoved: Optional[bool] = Field(
        None, description='Defines if the seller is removed.'
    )
    RequestedUpdateDate: Optional[str] = Field(
        None,
        description='Date when an SKU binding update was requested for the last time, in UTC format.',
    )
    SellerId: Optional[str] = Field(
        None,
        description='ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
    )
    SellerStockKeepingUnitId: Optional[str] = Field(
        None, description="SKU ID in the seller's store."
    )
    SkuSellerId: Optional[int] = Field(None, description='SKU Binding ID.')
    StockKeepingUnitId: Optional[int] = Field(
        None, description='SKU ID in the VTEX marketplace.'
    )
    UpdateDate: Optional[str] = Field(
        None,
        description='Date when the SKU binding was updated for the last time, in UTC format.',
    )


class SkuBindingPvtSkusellerInsertionPostRequest(BaseModel):
    IsActive: bool = Field(..., description='Defines if the SKU binding is active.')
    SellerId: str = Field(
        ...,
        description='ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
    )
    SellerStockKeepingUnitId: str = Field(..., description='SKU seller ID.')
    StockKeepingUnitId: int = Field(..., description='SKU ID in the marketplace.')


class SkuBindingPvtSkusellerListBysellerIdSellerIdGetResponseItem(BaseModel):
    FreightCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller.',
    )
    IsActive: Optional[bool] = Field(
        None, description='Defines if the SKU binding is active.'
    )
    ProductCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    SellerId: Optional[str] = Field(
        None,
        description='ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
    )
    SellerStockKeepingUnitId: Optional[str] = Field(
        None, description="SKU ID in the seller's store."
    )
    StockKeepingUnitId: Optional[int] = Field(
        None, description='SKU ID in the marketplace.'
    )


class SkuBindingPvtSkusellerListBysellerIdSellerIdGetResponse(
    RootModel[List[SkuBindingPvtSkusellerListBysellerIdSellerIdGetResponseItem]]
):
    root: List[SkuBindingPvtSkusellerListBysellerIdSellerIdGetResponseItem]


class SkuBindingPvtSkusellerPagedSelleridSellerIdGetResponseItem(BaseModel):
    FreightCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller.',
    )
    IsActive: Optional[bool] = Field(
        None, description='Defines if the SKU binding is active.'
    )
    ProductCommissionPercentage: Optional[float] = Field(
        None,
        description='The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.',
    )
    SellerId: Optional[str] = Field(
        None,
        description='ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
    )
    SellerStockKeepingUnitId: Optional[str] = Field(
        None, description="SKU ID in the seller's store."
    )
    StockKeepingUnitId: Optional[int] = Field(
        None, description='SKU ID in the marketplace.'
    )


class SkuBindingPvtSkusellerPagedSelleridSellerIdGetResponse(
    RootModel[List[SkuBindingPvtSkusellerPagedSelleridSellerIdGetResponseItem]]
):
    root: List[SkuBindingPvtSkusellerPagedSelleridSellerIdGetResponseItem]


class SkuBindingPvtSkusellerSellerIdSellerSkuIdGetResponse(BaseModel):
    IsActive: bool = Field(..., description='Defines if the SKU binding is active.')
    IsPersisted: bool = Field(..., description='Defines if the seller is persisted.')
    IsRemoved: bool = Field(..., description='Defines if the seller is removed.')
    RequestedUpdateDate: str = Field(
        ...,
        description='Date when an SKU binding update was requested for the last time, in UTC format.',
    )
    SellerId: str = Field(
        ...,
        description='ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.',
    )
    SellerStockKeepingUnitId: str = Field(..., description='SKU seller ID.')
    SkuSellerId: int = Field(..., description="SKU ID in the seller's store.")
    StockKeepingUnitId: int = Field(..., description='SKU ID in the VTEX marketplace.')
    UpdateDate: str = Field(
        ...,
        description='Date when the SKU binding was updated for the last time, in UTC format.',
    )


class SkuBindingPvtSkusellerSellerIdSellerSkuIdPutRequest(BaseModel):
    StockKeepingUnitId: int = Field(
        ..., description='SKU ID in the marketplace.', examples=[1]
    )
